type SubItemImg {
	imageId: String
	imageLabel: String
	imageUrl: String
	imageText: String
	imageLastModified: String
}

type SubItems {
	itemId: String
	name: String
	nameComplete: String
	complementName: String
	ean: String
	measurementUnit: String
	unitMultiplier: Int
	isKit: Boolean
	images: [SubItemImg]
	Talla: [String]
	variations: [String]
}

type Product {
	productId: ID
	productName: String
	brand: String
	brandId: Int
	brandImageUrl: String
	linkText: String
	productReference: String
	productReferenceCode: String
	categoryId: String
	productTitle: String
	metaTagDescription: String
	releaseDate: String
	link: String
	description: String
	categories: [String]
	categoriesIds: [String]
	Color: [String]
	Silueta: [String]
	linea: [String]
	cuidados: [String]
	origen: [String]
	tipoPrenda: [String]
	items: [SubItems]
}

type PaginationInfo {
	tableLength: Int
	itemsLength: Int
	currentItemFrom: Int
	currentItemTo: Int
	currentPage: Int
}

type PaginatedProducts {
	items: [Product]
	pagination: PaginationInfo
}

type User {
	id: ID!
	name: String
	lastName: String
	username: String
	email: String!
	createDate: String
	roles: [Role]
}

type Role {
	id: ID!
	name: String!
	permissions: [String!]!
}

type AuthPayload {
	token: String
	user: User
}

type Query {
	users: [User]
	user(id: ID!): User
	roles: [Role]
	role(id: ID!): Role
	product(productId: String!): Product
	products(from: Int!, to: Int!, search: String): PaginatedProducts
}

type Mutation {
	registerUser(
		name: String
		lastName: String
		username: String
		email: String!
		password: String!
		roleIds: [ID!]!
	): String

	updateUser(
		id: ID!
		name: String!
		lastName: String!
		email: String
		password: String
		roleIds: [ID]
	): User

	deleteUser(id: ID!): Boolean

	createRole(name: String!, permissions: [String!]!): Role
	updateRole(id: ID!, name: String, permissions: [String!]): Role
	deleteRole(id: ID!): Boolean

	login(email: String!, password: String!): AuthPayload
}
